import type { ParentNode, ChildNode, Template, DocumentFragment, Document, Node } from 'parse5/dist/tree-adapters/default.js';
/**
 * Determines if a given node is a document or not
 * @param {Node} node Node to test
 * @return {boolean}
 */
export declare function isDocument(node: Node): node is Document;
/**
 * Determines if a given node is a document fragment or not
 * @param {Node} node Node to test
 * @return {boolean}
 */
export declare function isDocumentFragment(node: Node): node is DocumentFragment;
/**
 * Determines if a given node is a template node or not
 * @param {Node} node Node to test
 * @return {boolean}
 */
export declare function isTemplateNode(node: Node): node is Template;
export declare const isElementNode: (node: Node) => node is import("parse5/dist/tree-adapters/default.js").Element;
export declare const isCommentNode: (node: Node) => node is import("parse5/dist/tree-adapters/default.js").CommentNode;
export declare const isDocumentTypeNode: (node: Node) => node is import("parse5/dist/tree-adapters/default.js").DocumentType;
export declare const isTextNode: (node: Node) => node is import("parse5/dist/tree-adapters/default.js").TextNode;
/**
 * Determines if a given node is a parent or not
 * @param {Node} node Node to test
 * @return {boolean}
 */
export declare function isParentNode(node: Node): node is ParentNode;
/**
 * Determines if a given node is a child or not
 * @param {Node} node Node to test
 * @return {boolean}
 */
export declare function isChildNode(node: Node): node is ChildNode;
